#include "Global.h"
#include "Flasher.h"

#define SCREEN_I2C_ADDR 0x3C // or 0x3C
#define SCREEN_WIDTH 128     // OLED display width, in pixels
#define SCREEN_HEIGHT 64     // OLED display height, in pixels
#define OLED_RST_PIN -1      // Reset pin (-1 if not available)

Adafruit_SSD1306 display(128, 64, &Wire, OLED_RST_PIN);

// OLED Animation: walk
// Code auto-generated by https://wokwi.com/animator, graphics by icons8.com

#define FRAME_DELAY (10)
#define FRAME_WIDTH (128)
#define FRAME_HEIGHT (64)
#define FRAME_COUNT (sizeof(reading) / sizeof(reading[0]))


// Calibration factor
const float scale = (5.0 / 1023.0) * ((390000.0 + 100000.0) / 100000.0); // (Vref/ADC_res) * (R1+R2)/R2
float voltage = 0.0;

int menuitem=1;
String mode;

const int OhmMeter = 0; // entrada analogica A0
const int voltMeter = 1; //entrada analogica A1
Flasher LED(9,200,200); // pin digital para el led indicador
const int modeInput = 10; // pin digital para la lectura del modo
int currentMode;
int previousMode;

const int R3 = 6; 
const int R2 = 5; 
const int R1 = 4; 
float R = 0.00; 

char _buffer[11];

int frame = 0;

unsigned long currentMillis;
unsigned long animationMillis=0.0;
unsigned long read=0.0;
unsigned long rd1=0.0;
unsigned long rd2=0.0;
unsigned long rd3=0.0;
float r1 = 0.00; 
float r_ref1 = 1000.00; 
float adc_value1 = 0.00;

float r2 = 0.00; 
float r_ref2 = 10000.00;
float adc_value2 = 0.00;

float r3 = 0.00; 
float r_ref3 = 100000.00; 
float adc_value3 = 0.00;

int st = 0; // Controla los estados en la lectura en modo Ohmmeter
int stMenu=0;

void parseBuffer(){
  if (adc_value1 < 1022.90) 
  { 
    r1 = (adc_value1 * r_ref1) / (1023 - adc_value1); 
  }

  if (adc_value2 < 1022.90) 
  { 
    r2 = (adc_value2 * r_ref2) / (1023 - adc_value2); 
  }


  if (adc_value3 < 1022.90) 
  { 
    r3 = (adc_value3 * r_ref3) / (1023 - adc_value3); 
  }

  if (r2 >= 0) {
    if (r2 < 1000 && r2 >= 0) {
      R=r1; // Switch to low range
    } 
    else if (r2 > 100000) {
      R=r3; // Switch to high range
    }
    else{
      R=r2;
    }
  }

  if(adc_value1>1022 && adc_value2>1022) R=5000000;

  if(R < 90.0)
    sprintf(_buffer, "Under Load");
  else if(R < 1000.0)
    sprintf(_buffer, "%03u.%1u Ohm ", (uint16_t)R, (uint16_t)(R*10)%10);
  else if(R < 10000.0)
    sprintf(_buffer, "%1u.%03u kOhm", (uint16_t)(R/1000), (uint16_t)R%1000);
  else if(R < 100000.0)
    sprintf(_buffer, "%02u.%02u kOhm", (uint16_t)(R/1000), (uint16_t)(R/10)%100);
  else if(R < 1000000.0)
    sprintf(_buffer, "%03u.%1u kOhm", (uint16_t)(R/1000), (uint16_t)(R/100)%10);
  else if(R < 3000000.0)
    sprintf(_buffer, "%1u.%03u MOhm", (uint16_t)(R/1000000), (uint16_t)(R/1000)%1000);
  else if(R > 3000000.0)
    sprintf(_buffer, "Over Load ");

  r1 = 0.00; 
  adc_value1 = 0.00;

  r2 = 0.00; 
  adc_value2 = 0.00;

  r3 = 0.00;  
  adc_value3 = 0.00;
}

void calculate_resistor() {  
  static int i = 0;
  switch(st){
    case  1:
      pinMode(R1, INPUT); 
      pinMode(R2, OUTPUT); 
      pinMode(R3, INPUT); 
      digitalWrite(R2, HIGH);   
      st = 2;
      break;
    case  2:
      if(currentMillis - rd2 > 3 && i<20){
        adc_value2 = adc_value2 + analogRead(OhmMeter); 
        i++;        
      } 
      else {
        adc_value2 = adc_value2 / 20;
        rd2 = currentMillis;
        i = 0;
        st = 3;
      }
      break;
    case  3:
      pinMode(R1, OUTPUT); 
      pinMode(R2, INPUT); 
      pinMode(R3, INPUT); 
      digitalWrite(R1, HIGH); 
      st=4;
      break;
    case  4:
      if(currentMillis - rd1 > 3 && i<20){         
          adc_value1 = adc_value1 + analogRead(OhmMeter);
          i++;       
      }
      else{
        adc_value1 = adc_value1 / 20; 
        rd1 = currentMillis;
        i=0;
        st = 5;
      }
      break;
    case  5:
      pinMode(R1, INPUT); 
      pinMode(R2, INPUT); 
      pinMode(R3, OUTPUT); 
      digitalWrite(R3, HIGH); 
      st = 6;
      break;
    case  6:
      if(currentMillis - rd3 > 3 && i<20){        
          adc_value3 = adc_value3 + analogRead(OhmMeter);
          i++;         
      }
      else{
        adc_value3 = adc_value3 / 20;
        rd3 = currentMillis; 
        i = 0;
        parseBuffer();
        st = 1;
      }      
      break;
    default:
      break;
  }
}

void calculateVol(){
  static int adc_value1 = analogRead(voltMeter);
  static unsigned long prevMillis = currentMillis;
  static int j = 0;
  if(currentMillis - prevMillis > 3 && j<20){
    adc_value1 = adc_value1 + analogRead(voltMeter);
    prevMillis = currentMillis;
    j++;
  }
  if(j==20){
    adc_value1 = adc_value1 / 20; 
    voltage = adc_value1 * scale;  
    j = 0;
    sprintf(_buffer, "%u.%1u Volts ", (unsigned int)voltage, ((unsigned int)(voltage*10))%10);
    adc_value1 = analogRead(voltMeter);
  }  
}


void showReadingScreen(){
  display.clearDisplay();
  display.drawBitmap(0, 0, board, FRAME_WIDTH, FRAME_HEIGHT,1);
  
  display.setCursor(7,7);
  display.setTextSize(1);
  display.setTextColor(WHITE);
  display.print("Mode: ");
  display.print(mode);

  

  if(mode == "Ohmmeter") {
    calculate_resistor();
  }
  else {
    calculateVol();
  }

  if(strcmp(_buffer,"Over Load ")==0 || strcmp(_buffer,"Under Load")==0){
    display.drawChar(18, 30, '!', WHITE, 0, 2);
    display.drawBitmap(7,20, load[frame], 32, 32, 1);
    frame = (frame + 1) % FRAME_COUNT;
  }
  else{
    display.drawBitmap(7,20, reading[frame], 32, 32, 1);
    frame = (frame + 1) % FRAME_COUNT;
  }       
  display.setCursor(45,22); 
  display.setTextSize(2); 
  String ms = String(_buffer);  
  int i = ms.indexOf(' ');
  String a = ms.substring(0,i);
  String b = ms.substring(i+1);
  display.print(a);
  display.setCursor(45,39);
  display.print(b);
  display.display();
}


void setup() {

  pinMode(modeInput,INPUT);

  currentMode = digitalRead(modeInput);
  if(currentMode) previousMode=0;
  else previousMode=1;

  display.begin(SSD1306_SWITCHCAPVCC, SCREEN_I2C_ADDR);
  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(WHITE);
  display.setCursor(10,10);
  display.print("Design by");
  display.setTextSize(2);
  display.setCursor(10,27);
  display.setTextColor(BLACK,WHITE);
  display.print(" VASS ");
  display.setTextSize(1);
  display.setCursor(10,45);
  display.setTextColor(WHITE);
  display.print("Instruments");
  display.display();
  delay(3000);
  
}

void loop() {
  currentMillis = millis();
  currentMode = digitalRead(modeInput);
  if(previousMode != currentMode) {
    if(currentMode){
      mode = "Ohmmeter";
      sprintf(_buffer,"Under Load");
      st = 1;            
    }
    else {
      mode = "Voltmeter";    
    }  
    previousMode=currentMode;
    LED.setN(0);
  }
  LED.Update();
  showReadingScreen();      
}

